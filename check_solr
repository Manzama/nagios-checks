#!/usr/bin/env python

import argparse
import sys
import libxml2
import urllib2

STATUS_OK = 0
STATUS_WARNING = 1
STATUS_CRITICAL = 2

URLROOT_DEFAULT='/solr'
STATSURL='/admin/mbeans/?stats=true'
PINGURL='/admin/ping'

TEMPLATE='SOLR {status}: {message} | {perfdata}'

cachestats_xpath = "//response/lst[@name='solr-mbeans']/lst[@name='CACHE']/*"
selectstats_xpath = "//response/lst[@name='solr-mbeans']/lst[@name='QUERYHANDLER']/lst[@name='/select']/lst[@name='stats']/*"
updatestats_xpath = "//response/lst[@name='solr-mbeans']/lst[@name='QUERYHANDLER']/lst[@name='/update']/lst[@name='stats']/*"
pingstats_xpath = "//response/lst[@name='solr-mbeans']/lst[@name='QUERYHANDLER']/lst[@name='/admin/ping']/lst[@name='stats']/*"
pingstatus_xpath = "//response/str[@name='status']"

def fetch_url(host, port, path):
      url = 'http://{host}:{port}{path}'.format(host=host, port=port, path=path)
      try:
            print url
            u = urllib2.urlopen(url)
      except urllib2.URLError:
            raise
      except urllib2.HTTPError, instance:
            return instance.code, instance.reason

      result = u.read()
      u.close()
      return 200, result

def xmlnodes_to_dict(xmlnodes):
      ret = {}
      idx = 0
      for item in xmlnodes:
            if item.name not in ('long','int','float','double', 'bool', 'none', 'str'):
                  continue

            idx += 1
            name = item.prop('name')
            if name is None:
                  print str(item)
                  name = str(idx)

            value = item.getContent()
            if item.name in ('long','int','float','double'):
                  value = float(value)
            elif item.name == 'bool':
                  if value == 'true':
                        value = True
                  else:
                        value = False
            elif item.name == 'none':
                  value = None

            ret[name] = value
      return ret


def xmlnodes_cache_to_dict(xmlnodes, prefix=None):
      ret = {}
      for cache in xmlnodes:
            if cache.name != 'lst':
                  continue
            attrib = cache.hasProp('name')
            if attrib:
                  cachename = attrib.getContent().replace('Cache','')
            else:
                  continue

            if prefix and cachename != prefix:
                  continue

            for ch in cache.children:
                  if ch.hasProp('name') and ch.hasProp('name').getContent() == 'stats':
                        if cachename == 'field':
                              # field cache is a weird format
                              stats = {'entries_count':0, 'totsz_kb':0}
                              for c in ch.children:
                                    if c.prop('name') == 'entries_count':
                                          stats['entries_count'] = int(c.getContent())
                                    elif c.prop('name') == 'total_size':
                                          stats['totsz_kb'] = float(c.getContent().split()[0])
                        else:
                              stats = xmlnodes_to_dict(ch.children)
                        for v in stats:
                              k = v.replace('cumulative_','c')
                              ret[cachename+'_'+k] = stats[v]
      return ret


parser = argparse.ArgumentParser(description='Check the status of a Solr server.')
parser.add_argument('-m', dest='module',
                    action='store',
                    choices=['ping','select','update','pingstats','cache'],
                    default='ping',
                    help='choose a module (default ping)')
parser.add_argument('--cache-prefix', dest='cache_prefix',
                    action='store',
                    default=None,
                    help='Choose a cache prefix to filter on.'
                    )
parser.add_argument('--host', dest='host',
                    action='store',
                    default='localhost',
                    help='Server to connect to.')
parser.add_argument('--port', dest='port',
                    action='store',
                    default='8080',
                    type=int,
                    help='Server port to connect to.')
parser.add_argument('--path', dest='path',
                    action='store',
                    default=URLROOT_DEFAULT,
                    help="Root of solr index stats pages.")
parser.add_argument('--test', dest='testfile',
                    action='store',
                    default='',
                    help='An XML file which overrides the web access.')

parser.add_argument('--debug', dest='debug',
                    action='store_true')

args = parser.parse_args()

solrhost=args.host
solrport=args.port

xpath = {'ping': pingstatus_xpath,
         'select': selectstats_xpath,
         'update': updatestats_xpath,
         'cache': cachestats_xpath,
         'pingstats': pingstats_xpath}[args.module]

if args.testfile:
      content = file(args.testfile, 'r').read()
else:
      urlpath = STATSURL
      if args.module == 'ping':
            urlpath = PINGURL

      urlpath = args.path + urlpath
      try:
            code, content = fetch_url(solrhost, solrport, urlpath)
      except Exception, instance:
            print TEMPLATE.format(status='CRITICAL',
                                  message="Failed to access SOLR. Exception: "+repr(instance),
                                  perfdata='')
            sys.exit(STATUS_CRITICAL)

      if code != 200:
            print TEMPLATE.format(status='CRITICAL',
                                  message="Error from Tomcat: "+str(code)+' '+content,
                                  perfdata='')
            sys.exit(STATUS_CRITICAL)

try:
      print content
      x = libxml2.parseDoc(content)
except libxml2.libxmlError, instance:
      print TEMPLATE.format(status='CRITICAL',
                            message="Error parsing XML: "+str(instance),
                            perfdata='')
      sys.exit(STATUS_CRITICAL)


ctx = x.xpathNewContext()
statustree = ctx.xpathEval(xpath)

if args.debug:
      print statustree

if args.module == 'cache':
      # cache has a more complicated output than select
      statusvalues = xmlnodes_cache_to_dict(statustree, args.cache_prefix)
else:
      statusvalues = xmlnodes_to_dict(statustree)

outstatus = 'OK'
outexit = 0
outperf = ''
outmessage = ''

if args.module == 'ping':
      if statusvalues['status'] == 'OK':
            outmessage = 'ping ok.'
      else:
            outstatus = 'WARNING'
            outexit = STATUS_WARNING
            outmessage = 'ping ??? '+statusvalues['status']
else:
      outmessage = 'status for '+args.module
      if args.module == 'cache' and args.cache_prefix:
            outmessage += '(' + args.cache_prefix + ')'
      for item in statusvalues:
            outperf += "'{label}'={value} ".format(label=item, value=statusvalues[item])

print TEMPLATE.format(status=outstatus,
                      message=outmessage,
                      perfdata=outperf)
sys.exit(outexit)
